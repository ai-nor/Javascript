//функція дозволяє виконувати певні операції, прописані у функції, багато разів, щоб не дублювати код

function sum (a,b) {    //функція додавання двох чисел, у дужках параметри - змінні
    let c = a+b;        //тіло функції
    console.log (c);

    return c;           //що має повернути функція
}

sum (3,12);             //виклик фнкції, у дужках передаються значення параметрів - аргументи функції
sum (5,4);              //виклик фнкції, у дужках передаються значення параметрів - аргументи функції

let a=2;
let b=4;
sum (a,b);              //виклик фнкції, у дужках передаються значення параметрів - аргументи функції - через змінні



const AnonimFunc = function (a,b) {    //анонімна функція, але ім'я присвоєне через змінну
    let c = a+b;        //тіло функції
    console.log (c);

    return c;           //що має повернути функція
}

AnonimFunc (1,2)        //виклик анонімної функції


const MyFunc =  (a,b) => {    //інший запис функції
    return (a + b);           //що має повернути функція
}


const MyFunc1 =  (a, b =1) => {    //інший запис функції, у параметрі передано вже значення
    return (a + b);           //що має повернути функція
}

MyFunc1 (1);                //візьме перший аргумент, а дугий вже задано
console.log(MyFunc1 (1));


//є вже стандартні написані функції

console.log(Date());

//callback

function first() {
    console.log ("first");
}

setTimeout(first, 5000) //затримує виклик функції на заданий час, час указується у мілісекундах

console.log("123"); //у такому випадку ця функція віддасть результат першою

function one() {
    setTimeout(function(){
        console.log ("first");
    }),5000 
}

function two() {   
    console.log ("second");
}
one(); 
two(); 

function funcWithCallBack (param1, sallbackFunc) {  //стандартний запис коллбек функції
    console.log('Ось мій параметр: ${param1}');
    sallbackFunc ();

}


